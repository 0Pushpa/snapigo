require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")

require 'json'
podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}

ENV['RCT_NEW_ARCH_ENABLED'] = '0' if podfile_properties['newArchEnabled'] == 'false'
ENV['EX_DEV_CLIENT_NETWORK_INSPECTOR'] = podfile_properties['EX_DEV_CLIENT_NETWORK_INSPECTOR']

# iOS 16.0 minimum to play nice with MLKit and modern pods
platform :ios, podfile_properties['ios.deploymentTarget'] || '16.0'

install! 'cocoapods', :deterministic_uuids => false

prepare_react_native_project!

target 'Snapigo' do
  use_expo_modules!

  if ENV['EXPO_USE_COMMUNITY_AUTOLINKING'] == '1'
    config_command = ['node', '-e', "process.argv=['', '', 'config'];require('@react-native-community/cli').run()"]
  else
    config_command = [
      'npx', 'expo-modules-autolinking', 'react-native-config',
      '--json', '--platform', 'ios'
    ]
  end

  config = use_native_modules!(config_command)

  # ---- Option B: force static frameworks so Swift can import modules like `Expo`
  use_frameworks! :linkage => :static
  # (comment out the conditional variants so they don't override)
  # use_frameworks! :linkage => podfile_properties['ios.useFrameworks'].to_sym if podfile_properties['ios.useFrameworks']
  # use_frameworks! :linkage => ENV['USE_FRAMEWORKS'].to_sym if ENV['USE_FRAMEWORKS']

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => podfile_properties['expo.jsEngine'].nil? || podfile_properties['expo.jsEngine'] == 'hermes',
    :app_path => "#{Pod::Config.instance.installation_root}/..",
    :privacy_file_aggregation_enabled => podfile_properties['apple.privacyManifestAggregationEnabled'] != 'false',
  )

  # ===================== POST INSTALL FIXES =====================
  post_install do |installer|
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      :ccache_enabled => podfile_properties['apple.ccacheEnabled'] == 'true',
    )

    # 1) Run all CocoaPods script phases with bash (fixes ARCHS[@] unbound variable)
    installer.pods_project.targets.each do |t|
      t.shell_script_build_phases.each do |phase|
        phase.shell_path = '/bin/bash'
      end
    end

    # 2) Allow arm64 on the iOS Simulator & remove app overrides
    projects = [installer.pods_project] + installer.aggregate_targets.map(&:user_project).uniq

    projects.each do |proj|
      proj.targets.each do |t|
        t.build_configurations.each do |cfg|
          cfg.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = ''
          cfg.build_settings['ARCHS'] = '$(ARCHS_STANDARD)'

          min_target = '13.0'
          cur = cfg.build_settings['IPHONEOS_DEPLOYMENT_TARGET']
          if cur.nil? || cur.to_f < min_target.to_f
            cfg.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = min_target
          end
        end
      end

      # Fix the app-target override warning by inheriting from Pods
      unless proj == installer.pods_project
        app_target = proj.targets.find { |t| t.name == 'Snapigo' }
        if app_target
          app_target.build_configurations.each do |cfg|
            cfg.build_settings.delete('EXCLUDED_ARCHS[sdk=iphonesimulator*]')
            cfg.build_settings.delete('EXCLUDED_ARCHS')
            cfg.build_settings['EXCLUDED_ARCHS'] = '$(inherited)'
          end
        end
      end

      proj.save
    end

    # 3) Normalize DEFINES_MODULE to silence merge warnings
    problematic = %w[expo-dev-menu Main ReactNativeCompatibles SafeAreaView Vendored]
    installer.pods_project.targets.each do |t|
      next unless problematic.include?(t.name)
      t.build_configurations.each do |cfg|
        cfg.build_settings['DEFINES_MODULE'] = 'YES'
      end
    end
    installer.pods_project.save

    # 4) Keep Expo resource bundles from code signing (noise reduction only)
    installer.target_installation_results.pod_target_installation_results
      .each do |_pod_name, target_installation_result|
        target_installation_result.resource_bundle_targets.each do |rb|
          rb.build_configurations.each do |cfg|
            cfg.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
          end
        end
      end
  end
  # ==============================================================
end
